%Derek Lax
%1D/2D/3D Finite Volume Solver with CMFD


clear
clc
close all

%%%%%%%%%%%%Problem Solving Specifications%%%%%%%%%%%%%%%%
MethodGauss = 1;
MethodEigs = 0;
max_iters = 2000;
convergence = 10^-9;
gridReductionFactor = [2 1 1];
iterationsBetweenCMFD = 1;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%% Material Defintions %%%%%%%%%%%%%%%%%%%%%%
ng = 2;
mat = Material();
D = [1.5 0.3];
sigA = [0.05 .5];
nusigF = [[0.02 0.0]
          [0.48 0.0]];
sigS = [[0.05 0.1]
        [0.0 0.5]]; 
mat.D = D;
tot = [.2 1];

%D = [1.5 0.3];
%sigA = [0.05 .5];
%nusigF = [[0.02 0.0]
%          [0.48 0.0]];
%sigS = [[0.05 0.1]
%        [0.0 0.5]]; 
%mat.D = D;
%tot = [.2 1];

mat.nusigF = nusigF;
mat.sigT = tot;
mat.sigA = sigA;
mat.sigS = sigS;
mat.nusigF = nusigF;
mat2 = Material();
D = [1.0 .1];
sigA = [0.5 0];
nusigF = [[0 0.0]
          [0 0.0]];
sigS = [[0.5 0.1]
        [0.01 5]]; 
tot = [1.1 5.01];
mat2.D = D;
mat2.nusigF = nusigF;
mat2.sigT = tot;
mat2.sigA = sigA;
mat2.sigS = sigS;
mat2.nusigF = nusigF;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%Geometry Definitions%%%%%%%%%%%%%%%%%%
%Dimensions of problem. This value superceeds all other 
%settings and will override them where necessary.
dimensions = 1;
%Size of each dimension in cm
dim = [200 1 1];
%Number of cells in each dimension
x_len = 30; y_len = 1; z_len = 1;
%Set boundary conditions via albedo. For reference:
% 0 = Vacuum
% 1 = Reflective
BC = [0 1 1];
mesh = Mesh(x_len,y_len,z_len,ng);
mesh = mesh.setNumMats(1);
mesh.mats = [mat];
mesh = mesh.setAllMat(1,mat);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%                   END USER INPUT                   %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%






%%%%%%%%%%%%%%%%Build Problem Geometry%%%%%%%%%%%%%%%%%%%%
%Evenly space mesh points
if (dimensions > 3 || dimensions < 1)
    disp('Invalid number of dimensions');
    break
end

% if (dimensions < 3)
%    if (z_len ~= 1)
%        disp('Invalid number of mesh cells in z-axis.');
%        disp('Less than 3D. Number of cells in z-axis must be set to 1');
%        break
%    end
%    dim(3) = 1;
%    BC(3) = 1;
% end
% 
% if (dimensions < 2)
%    if (y_len ~= 1)
%        disp('Invalid number of mesh cells in y-axis.');
%        disp('Problem is 1D. Number of cells in y-axis must be set to 1');
%        break
%    end
%    dim(2) = 1;
%    BC(2) = 1;
% end

mesh = mesh.setEqualDist(1,dim(1),dim(2),dim(3));
%Set boundary conditions
mesh = mesh.setBC(BC(1), BC(2), BC(3));%set BC
%Compute total number of mesh cells
total_mesh = mesh.x * mesh.y * mesh.z * mesh.g;


%%%%%%%%%%%%%%%%%%%%%%Run Solver%%%%%%%%%%%%%%%%%%%%%%%%%%

[M mesh] = BuildLossMatrix(mesh, 1, false, 0);
F = BuildProductionMatrix(mesh, 1);

%Initial Guess:
format long
k = 1;
kold = .1;
phiold = ones(total_mesh,1);
if MethodGauss == 1
    for iters = 1:max_iters

        if (abs(k-kold) < convergence)
            break;
        end
        kold = k;
        b = F*phiold/kold;
        phi = M\b;
        k = kold * sum(phi)/sum(phiold);
         phi = phi / sum(sum(phi));
        phiold = phi;
        
        %Check if should do CMFD
        if  (mod(iters,iterationsBetweenCMFD)==0)
            
          %reshape flux matrix
          flux = reshape(phi,ng,numel(phi)/ng,1,1);
          %save flux
          mesh.phi = flux;
          %calculate net current across cells.
          for i1 = 1:x_len
              for j1 = 1:y_len
                  for k1 = 1:z_len
                      for g1 = 1:ng
                          for surf = 1:6
                              %check for boundary
                              xyz = round((surf / 2)); %1=x;2=y;3=z
                              %%determine left or right surface
                              side = -2 * mod(surf,2) + 1; % -1=left, 1=right
                              %%determine neighbor index
                              %if doesn't exist (boundary), returns -1
                              if (xyz == 1)
                                  i2 = i1 + side;
                                  j2 = j1;
                                  k2 = k1;
                              elseif (xyz == 2)
                                  i2 = i1;
                                  j2 = j1 + side;
                                  k2 = k1;
                              else %(xyz == 3) 
                                  i2 = i1;
                                  j2 = j1;
                                  k2 = k1 + side;		        	
                              end
                              neigh = checkBoundary(i1,j1,k1,x_len,y_len,z_len,xyz,side);
                              if (neigh == 1)
                              %not boundary
                                  %calculate current for each boundary
                                  mesh.Jsurf(i1,j1,k1,g1,surf) = -mesh.dtilde(i1,j1,k1,g1,surf) * ...
                                      (flux(g1,i1,j1,k1) - flux(g1,i2,j2,k2));                                
                              else
                              %boundary
                              %Only works for vacuum currently
                                  mesh.Jsurf(i1,j1,k1,g1,surf) = -mesh.dtilde(i1,j1,k1,g1,surf) * ...
                                      flux(g1,i1,j1,k1);
                              end
                              if (side == 1)
                                      mesh.Jsurf(i1,j1,k1,g1,surf) = -mesh.Jsurf(i1,j1,k1,g1,surf);
                              end
                          end
                      end
                  end
              end
          end
          
          %Do CMFD
          
          
          
         
        end
    end
elseif MethodEigs == 1
    k = eigs(M\F);
end


ktrue = k;
disp k;
disp (k);
disp('iters');
disp(iters);

if (MethodGauss && dimensions == 1)
    flux = reshape(phi,ng,numel(phi)/ng,1,1);
    plotflux = reshape(phi,ng,numel(phi)/ng);
    plot(mesh.X,plotflux(1,:));
    hold on
    if (ng == 2) 
        plot(mesh.X,plotflux(2,:),'r');
    end
    xlabel('x (cm)')
    ylabel('Normalized Flux');
    legend('Group 1', 'Group 2');
    title('Reactor Flux Profile');
end



 disp k;
 disp (k2);
disp('iters');
disp(iters);
 
 if (MethodGauss && dimensions == 1)
     flux2 = reshape(phi2,ng,numel(phi2)/ng);
     figure;
     plot(coarse.X,flux2(1,:));
     hold on
     if (ng == 2) 
         plot(coarse.X,flux2(2,:),'r');
     end
     xlabel('x (cm)')
     ylabel('Normalized Flux');
     legend('Group 1', 'Group 2');
     title('Reactor Flux Profile - Coarse Mesh');
 end
 
%close all
 